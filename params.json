{"name":"RubyTree","body":"# RubyTree\r\n\r\n### Description\r\n\r\nRubyTree is a Ruby implementation of the generic tree data structure.  It\r\nprovides a node-based model to store keyed node-elements in the tree and simple\r\nAPIs to access, modify and traverse the structure.  RubyTree is node-centric,\r\nwhere individual nodes on the tree are the primary compositional and structural\r\nelements.\r\n\r\nThis implementation also mixes in the Enumerable module to allow standard access\r\nto the tree as a collection.\r\n\r\n### Synopsis\r\n\r\nAs an example, the following code-snippet implements this tree structure:\r\n\r\n\r\n                    +------------+\r\n                    |    ROOT    |\r\n                    +-----+------+\r\n            +-------------+------------+\r\n            |                          |\r\n    +-------+-------+          +-------+-------+\r\n    |  CHILD 1      |          |  CHILD 2      |\r\n    +-------+-------+          +---------------+\r\n            |\r\n            |\r\n    +-------+-------+\r\n    | GRANDCHILD 1  |\r\n    +---------------+\r\n\r\n```ruby\r\n # ..... Example starts.\r\n require 'tree'                 # Load the library\r\n\r\n # ..... Create the root node first.  Note that every node has a name and an optional content payload.\r\n root_node = Tree::TreeNode.new(\"ROOT\", \"Root Content\")\r\n\r\n # ..... Now insert the child nodes.  Note that you can \"chain\" the child insertions for a given path to any depth.\r\n root_node << Tree::TreeNode.new(\"CHILD1\", \"Child1 Content\") << Tree::TreeNode.new(\"GRANDCHILD1\", \"GrandChild1 Content\")\r\n root_node << Tree::TreeNode.new(\"CHILD2\", \"Child2 Content\")\r\n\r\n # ..... Lets print the representation to stdout.  This is primarily used for debugging purposes.\r\n root_node.print_tree\r\n\r\n # ..... Lets directly access children and grandchildren of the root.  The can be \"chained\" for a given path to any depth.\r\n child1 = root_node[\"CHILD1\"]\r\n grand_child1 = root_node[\"CHILD1\"][\"GRANDCHILD1\"]\r\n\r\n # ..... Lets retrieve siblings of the current node as an array.\r\n siblings_of_child1 = child1.siblings\r\n\r\n # ..... Lets retrieve immediate children of the root node as an array.\r\n children_of_root = root_node.children\r\n\r\n # ..... This is a depth-first and L-to-R pre-ordered traversal.\r\n root_node.each { |node| node.content.reverse }\r\n\r\n # ..... Lets remove a child node from the root node.\r\n root_node.remove!(child1)\r\n```\r\n\r\n### Requirements\r\n\r\n* Ruby 1.8+  (http://www.ruby-lang.org)\r\n\r\n* Run-time Dependencies:\r\n  * [structured_warnings](http://github.com/schmidt/structured_warnings)\r\n  * [Yard](http://yardoc.org) for the documentation\r\n  * [JSON](http://flori.github.com/json) for converting to/from the JSON format\r\n\r\n* Development dependencies (not required for installing the gem):\r\n  * [Hoe](http://seattlerb.rubyforge.org/hoe/Hoe.html)\r\n  * [gemcutter](http://gemcutter.org/gems/gemcutter)\r\n  * [Rubyforge](http://codeforpeople.rubyforge.org/rubyforge)\r\n\r\n### Installation\r\n\r\nInstalling RubyTree is simple. Just do:\r\n\r\n    $ gem install rubytree\r\n\r\n### Documentation\r\n\r\nThe main class for is Tree::TreeNode. See the class documentation for an usage\r\nexample.\r\n\r\nFrom a command line/terminal prompt, you can issue the following command to view\r\nthe text mode ri documentation:\r\n\r\n    $ ri Tree::TreeNode\r\n\r\nDocumentation for the latest released version is always available at:\r\n\r\n[http://rubytree.rubyforge.org/rdoc](http://rubytree.rubyforge.org/rdoc)\r\n\r\nDocumentation for the latest git HEAD is available at:\r\n\r\n[http://rdoc.info/projects/evolve75/RubyTree](http://rdoc.info/projects/evolve75/RubyTree)\r\n\r\nNote that the documentation is formatted for [Yard](http://yardoc.org).\r\n\r\n== Acknowledgments\r\n\r\nI would like to acknowledge the following contributors for helping improve RubyTree:\r\n\r\n1. [Dirk Breuer](http://github.com/railsbros-dirk) for contributing the JSON conversion code.\r\n2. Vincenzo Farruggia for contributing the (sub)tree cloning code.\r\n3. [Eric Cline](https://github.com/escline) for the Rails JSON encoding fix.\r\n\r\n### License\r\n\r\nRubyTree is licensed under the [BSD](http://www.opensource.org/licenses/bsd-license.php) license.\r\n\r\nCopyright (c) 2006, 2007, 2008, 2009, 2010, 2011, 2012 Anupam Sengupta\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification,\r\nare permitted provided that the following conditions are met:\r\n\r\n- Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n- Redistributions in binary form must reproduce the above copyright notice, this\r\n  list of conditions and the following disclaimer in the documentation and/or\r\n  other materials provided with the distribution.\r\n\r\n- Neither the name of the organization nor the names of its contributors may be\r\n  used to endorse or promote products derived from this software without\r\n  specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n","tagline":"A General Purpose Tree Data Structure for Ruby","google":"UA-326849-6","note":"Don't delete this file! It's used internally to help with page regeneration."}